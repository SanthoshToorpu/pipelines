name: "Download and Load KFP Images"
description: "Download KFP image artifacts and load them into Kind cluster"

runs:
  using: "composite"
  steps:
    - name: Download image artifacts
      uses: actions/download-artifact@v4
      with:
        name: kfp-images
        path: /tmp/kfp-images

    - name: Load images into Kind
      shell: bash
      run: |
        # Make sure the directory exists
        ls -la /tmp/kfp-images/
        
        # Load each image into Kind
        kind load image-archive /tmp/kfp-images/apiserver.tar --name kfp
        kind load image-archive /tmp/kfp-images/persistenceagent.tar --name kfp
        kind load image-archive /tmp/kfp-images/scheduledworkflow.tar --name kfp
        kind load image-archive /tmp/kfp-images/driver.tar --name kfp
        kind load image-archive /tmp/kfp-images/launcher.tar --name kfp
        
        # List images to see actual names
        docker exec kfp-control-plane crictl images
        
        # Tag the images with the expected registry prefix
        # Using the full path as shown in the crictl images output
        docker exec kfp-control-plane ctr -n k8s.io images tag docker.io/library/apiserver:latest kind-registry:5000/apiserver:latest
        docker exec kfp-control-plane ctr -n k8s.io images tag docker.io/library/persistenceagent:latest kind-registry:5000/persistenceagent:latest
        docker exec kfp-control-plane ctr -n k8s.io images tag docker.io/library/scheduledworkflow:latest kind-registry:5000/scheduledworkflow:latest
        docker exec kfp-control-plane ctr -n k8s.io images tag docker.io/library/driver:latest kind-registry:5000/driver:latest
        docker exec kfp-control-plane ctr -n k8s.io images tag docker.io/library/launcher:latest kind-registry:5000/launcher:latest
        
        # Verify images are properly tagged
        docker exec kfp-control-plane crictl images 